{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ratingsSource",
						"type": "DatasetReference"
					},
					"name": "ratingsSourceStream"
				},
				{
					"dataset": {
						"referenceName": "linksSource",
						"type": "DatasetReference"
					},
					"name": "linksSourceStream"
				},
				{
					"dataset": {
						"referenceName": "moviesSource",
						"type": "DatasetReference"
					},
					"name": "moviesSourceStream"
				},
				{
					"dataset": {
						"referenceName": "tagsSource",
						"type": "DatasetReference"
					},
					"name": "tagsSourceStream"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ratingsDestination",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "linksDestination",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "moviesDestination",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "tagsDestination",
						"type": "DatasetReference"
					},
					"name": "sink4"
				}
			],
			"transformations": [
				{
					"name": "Date"
				},
				{
					"name": "ratingstats"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          userId as integer,",
				"          movieId as integer,",
				"          rating as double,",
				"          timestamp as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> ratingsSourceStream",
				"source(output(",
				"          movieId as integer,",
				"          imdbId as integer,",
				"          tmdbId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> linksSourceStream",
				"source(output(",
				"          movieId as integer,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> moviesSourceStream",
				"source(output(",
				"          userId as integer,",
				"          movieId as integer,",
				"          tag as string,",
				"          timestamp as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 1000,",
				"     ignoreNoFilesFound: false) ~> tagsSourceStream",
				"ratingsSourceStream derive(timestamp = toDate(seconds(timestamp), 'yyyy-MM-dd')) ~> Date",
				"Date aggregate(groupBy(movieId),",
				"     count_rankings = count(),",
				"          ranking_mean = mean(rating)) ~> ratingstats",
				"ratingstats, moviesSourceStream join(ratingstats@movieId == moviesSourceStream@movieId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as string,",
				"          imdbId as string,",
				"          tmdbId as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"linksSourceStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as string,",
				"          imdbId as string,",
				"          tmdbId as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"moviesSourceStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"tagsSourceStream sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4"
			]
		}
	}
}